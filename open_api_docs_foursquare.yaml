openapi: 3.0.0
info:
  title:  FOURSQUARE - 01/10/2023
  description: >-
    **INTRODUCTION**

    REST API specification for FOURSQUARE API.

    This API is based on [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) principles and uses [JSON](https://en.wikipedia.org/wiki/JSON) to serialize data.


    **VERBS**


    As such, the API uses http methods as **verbs** as follows:
      * **GET** - To retrieve a resource or list of resources
      * **POST** - To create or update a resource
      * **PUT** - To update a resource
      * **DELETE** - To delete a resource


    **STATUS CODES**


    It also uses http **status codes** in responses to inform about the status of the response. Some usual response status codes and meanings are as follows:
      * _**200**_ - **OK** - the request was successful (some API calls may return 201 or 204 instead).
      * _**201**_ - **Created** - the request was successful and a resource was created.
      * _**204**_ - **No Content** - the request was successful but there is nothing to return (i.e. an empty list).
      * _**400**_ - **Bad Request** - the request wasn't understood, it was missing required parameters or the parameters didn't pass a validation test.
      * _**401**_ - **Unauthorized** - authentication failed or the user doesn't have permissions for the requested operation.
      * _**403**_ - **Forbidden** - access denied, mainly for an expired token.
      * _**404**_ - **Not Found** - the resource wasn't found or doesn't exists.
      * _**405**_ - **Method not allowed** - the requested method is not supported for the resource. Returned any time you use a http method in a resource that doesn't support it.
      * _**409**_ - **Conflict** -  there was a conflict with the request, i.e. if there is an attempt to create a resource that already exists.
      * _**429**_ - **Too Many Requests** - exceeded API calls request rate limit by a single client. May be returned by any method.
      * _**500**_ - **Internal Server Error** - a generic error message, given when an unexpected condition was encountered and no more specific message is suitable. May be returned by any method.
      * _**501**_ - **Not Implemented** - the requested method is not implemented.
      * _**503**_ - **Service Unavailable** - service is temporary unavailable (i.i. scheduled maintenance).


    **SECURITY**


    This API uses HTTP over [TLS](https://en.wikipedia.org/wiki/Transport_Layer_Security) (aka [HTTPS](https://en.wikipedia.org/wiki/HTTPS)) to provide communications security and privacy over the Internet.


    **AUTHENTICATION**


    If a method requires authentication it is stated in its reference.
    The API uses [Basic Access Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) in the login method. Login method should return a token used in the next methods that require authorization according to [Bearer Token Authentication](https://oauth.net/2/bearer-tokens).




    **TODO**

    This document is still a work in progress:
      * Purchases
        * Payment information (Not in web)
      * Notification preferences and history? Wait for UX.

  version: 1.0.0
  contact:
    name: Yamile
    email: c.s.yamile@gmail.com
servers:
  - url: ' url: https://api.foursquare.com/v3'
    description: main server
tags:
  - name: place
    description: 'Operations related with the searchs and data'

paths:
  /places:
    get:
      summary: Search for places in the FSQ Places database using a location
      description: >-
        Search for places in the FSQ Places database using a location and querying by name, category name, telephone number, taste label, or chain name. For example, search for "coffee" to get back a list of recommended coffee shops.
      
        You may pass a location with your request by using one of the following options. If none of the following options are passed, Place Search defaults to geolocation using ip biasing with the optional radius parameter.
          * ll & radius (circular boundary)
          * near (geocodable locality)
          * ne & sw (rectangular boundary)
      security:
        - BasicAuth: []
      tags:
        - place
      parameters:
        - $ref: '#/components/parameters/placeQueryParam'
        - $ref: '#/components/parameters/placeLlParam'

      responses:
        '200':
          description: >-
            OK
            <br/>The authorization information was correct (valid user+password combination)
          headers:
            User-Token:
              schema:
                type: string
                description: The user token, required for the next requests
                example: '9O1JkDLzRQRX233T2JWUr2PYeQq44100'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '429':
          $ref: '#/components/responses/429TooManyRequests'
        '500':
          $ref: '#/components/responses/500ServerError'

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    User:
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          format: email
          example: 'user@example.com'
        email:
          type: string
          format: email
          example: 'user@example.com'
        kennitala:
          type: string
          description: Icelandic identification number, only for Iceland
          example: '0201646899'
        prefix_phone:
          type: string
          minLength: 3
          example: '+370'
        phone:
          type: string
          minLength: 9
          example: '52102222'
        name:
          type: string
          example: 'John'
        last_name:
          type: string
          nullable: true
        ikeafamily:
          type: boolean
          nullable: true
          example: true
        ikeafamily_price_draw:
          type: boolean
          nullable: true
          example: true
        newsletter:
          nullable: true
          type: boolean
          example: true
        gender:
          nullable: true
          type: string
          example: male
        living_with_children:
          nullable: true
          type: integer
          example: 1
        city:
          nullable: true
          type: string
          example: "Vilna"
        code_locale_newsletter:
          nullable: true
          type: string
          example: "en_lt"
        birthday:
          type: string
          nullable: true
          format: date-time ISO8601
          example: '2018-10-09T13:23:42Z'
        active:
          type: boolean
          nullable: false
          example: false
        loyalty_card:
          type: string
          nullable: true
          example: '9428364033000400235'
        loyalty_card_pkpass_url:
          type: string
          description: url to get user's pkpass file
          nullable: true
          example: "https://test-rama8-lt.deswebislas.com/en/clientapi/v1/user/ikeafamily/pkpass"
        type:
          nullable: false
          type: string
          enum:
            - "PARTICULAR"
            - "BUSINESS"
          example: "BUSINESS"
    
        fcm_notifications_active:
          nullable: true
          type: boolean
          example: true

      required:
        - id
        - email
        - prefix_phone
        - phone
        - name
        - last_name
  
  parameters:
    acceptLanguageHeaderParam:
      in: header
      name: Accept-Language
      description: The language in which the client wants the response. View [Accept Language Header definition](https://developer.mozilla.org/es/docs/Web/HTTP/Headers/Accept-Language)
      schema:
        type: string
      examples:
        en:
          value: 'en'
          
    placeQueryParam:
      in: query
      name: query
      description: A string to be matched against all content for this place, including but not limited to venue name, category, telephone number, taste, and tips.
      schema:
        type: string
      allowEmptyValue: true
    placeLlParam:
      in: query
      name: ll
      description: The latitude/longitude around which to retrieve place information. This must be specified as latitude,longitude (e.g., ll=41.8781,-87.6298).
      schema:
        type: string
      allowEmptyValue: true
    placeRadiusParam:
      in: query
      name: ll
      description: Sets a radius distance (in meters) used to define an area to bias search results. The maximum allowed radius is 100,000 meters. Radius can be used in combination with ll or ip biased geolocation only. By using radius, global search results will be omitted.
      schema:
        type: integer
        format: int64
      allowEmptyValue: true
      
      
      
    addressIdPathParam:
      in: path
      name: addressId
      description: Address ID
      required: true
      schema:
        type: integer
        format: int64
    checkoutTokenHeaderParam:
      in: header
      name: Checkout-Token
      required: true
      description: >-
        This is a token for a order checkout.
        Used in checkout process, so it must be sent in all order checkout requests. It expires in 15 minutes.
      schema:
        type: string
        format: uuid
        example: "a999c3d6f1d04317a80122ee79f4d99c"
    customPageIdPathParam:
      in: path
      name: customPageId
      description: the custom page id
      schema:
        type: string
      examples:
        lack:
          value: 322
      required: true
    deviceNotificationTokenQueryParam:
      in: query
      name: deviceNotificationToken
      description: device notification token that sends request
      schema:
        type: string
        format: uuid
      example: "c9rHlbAsWjI:APA91bEbT4pmhLeC6pC5AfOxeWwdN8hpMzSaLIrnhFwPKFeknLDcX3pPmDxaMAEVsZUdUhnoVJasmogP3fOiJ47kQk3Jq-_LDX1i36PDejyK1f3L-xMSpXyI9_MwS3QYvFdBtXRZufEI"
    documentTypeParam:
      in: query
      name: documentType
      description: The type of document. Possible values are **receipt** and **invoice**.
      required: true
      example: "receipt"
      schema:
        type: string
    emailQueryParamRequired:
      in: query
      name: email
      description: An email
      schema:
        type: string
        format: email
      examples:
        user:
          value: user@example.com
          summary: "An example email"
      required: true
    inspirationIdPathParam:
      in: path
      name: inspirationId
      description: the inspiration id
      schema:
        type: string
      examples:
        lack:
          value: 322
      required: true
    languageQueryParam:
      in: query
      name: lang
      description: The language in which the client wants the response. Overrides Accept-Language header if it exists.
      schema:
        type: string
      examples:
        en:
          value: 'en'
    limitQueryParam:
      in: query
      name: limit
      description: Using with pageQueryParam. The number of products per page.
      schema:
        type: integer
        format: int64
      example: 10
    orderIdPathParam:
      in: path
      name: orderId
      description: The order identifier
      schema:
        type: integer
        format: int64
      required: true
      example: 2600
    pagePathParam:
      in: path
      name: pageId
      description: The page id
      schema:
        type: integer
        format: int64
      example: 1
      required: true
    pageQueryParam:
      in: query
      name: page
      description: Using with limitQueryParam. The page number for paginated searchs.
      schema:
        type: integer
        format: int64
      example: 1
    pathQueryParam:
      in: query
      name: path
      description: the range path
      schema:
        type: string
      examples:
        en:
          value: 'en/bathroom/bathroom-accessories'
      required: true
    productIdPathParam:
      in: path
      name: productId
      description: The product id
      schema:
        type: string
      examples:
        lack:
          value: 40431535
          summary: "LACK Coffee table"
      required: true
    productListIdQueryParam:
      in: query
      name: productListId
      description: The list of products id splited by comma.
      schema:
        type: string
      examples:
        first:
          value: '1132,35534,53454'
      required: true
    quantityQueryParam:
      in: query
      name: quantity
      description: The quantity of this product
      schema:
        type: integer
        format: int32
      examples:
        first:
          value: 1
      required: true
    serviceTypeIdPathParam:
      in: path
      name: serviceTypeId
      description: The service type id
      schema:
        type: integer
        format: int64
      examples:
        Home Delivery:
          value: 1
          summary: Home Delivery
      required: true
    shopIdHeaderParam:
      in: header
      name: Shop-Id
      description: The shop identifier.
      schema:
        type: number
        format: int32
        nullable: true
      allowEmptyValue: true
    shopIdQueryParam:
      in: query
      name: shopId
      description: The shop identifier. Overrides Shop-Id header if it exists.
      schema:
        type: number
        format: int32
        nullable: true
      allowEmptyValue: true
    shopIdPathParam:
      in: path
      name: shopId
      description: The shop identifier.
      schema:
        type: number
        format: int32
      required: true
    slugQueryParam:
      in: query
      name: slug
      description: the page slug
      schema:
        type: string
      examples:
        en:
          value: 'stylish-work-spots-for-new-beginnings-idea'
      required: true
    token1PathParam:
      in: path
      name: token1
      description: The user token activate account
      schema:
        type: string
      required: true
      example: 'TUWFGKPk'
    token2PathParam:
      in: path
      name: token2
      description: The user token activate account
      schema:
        type: string
      required: true
      example: 'ee5c7a70992999c76049a1bbb5d415f8b8bbd49f'
    userIdPathParam:
      in: path
      name: userId
      description: The user identifier.
      schema:
        type: integer
        format: int64
      required: true
    versionQueryParam:
        in: query
        name: version
        description: The version of this modification. Should be higher than the current one. Any update sent with a lower version than the current one in the server will be ignored.
        schema:
          type: integer
          format: int32
        examples:
          first:
            value: 1
        required: true
  responses:
    204NoContent:
      description:
        No Content<br/>The request have been executed successfully but there are no results.
    400BadRequest:
      description: >-
        Bad Request<br/>The request had a wrong format or didn't pass
        validation.
    401Unauthorized:
      description: >-
        Unauthorized<br/>The user + password combination in the passed
        credentials is wrong or missing.
    403Forbidden:
      description: >-
        Forbidden<br/>The request is correct but server denies because any reason, i.e. user not confirmed or order token expiration.
    404NotFound:
      description: >-
        Not Found<br/>The requested resource doesn't exist.
    429TooManyRequests:
      description: >-
        Too Many Requests<br/>Exceeded API calls request rate limit by a single client.
    500ServerError:
      description: >-
        Server Error<br/>The method will respond whith a 500 status code when
        there is any error in the server side.
